{"remainingRequest":"C:\\92_node_workspace\\ATL_node_workspace\\demo\\node_modules\\babel-loader\\lib\\index.js!C:\\92_node_workspace\\ATL_node_workspace\\demo\\src\\api\\config.js","dependencies":[{"path":"C:\\92_node_workspace\\ATL_node_workspace\\demo\\src\\api\\config.js","mtime":1539595562809},{"path":"C:\\92_node_workspace\\ATL_node_workspace\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1538620743517},{"path":"C:\\92_node_workspace\\ATL_node_workspace\\demo\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\92_node_workspace\\\\ATL_node_workspace\\\\demo\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\nimport axios from 'axios';\nimport router from '../router';\nvar baseURL = 'http://localhost:8433'; // const baseURL = 'http://localhost:3000'\n// const baseURL = ''\n\nvar instance = axios.create();\ninstance.defaults.timeout = 30000; //instance.defaults.headers['Access-Control-Allow-Origin'] = '*';\n\ninstance.interceptors.request.use(\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(config) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // if (config.url != '/login' && !localStorage.getItem('user_id')) {\n            //     router.push('/');\n            // }\n            if (config.url && config.url.charAt(0) === '/') {\n              config.url = \"\".concat(baseURL).concat(config.url);\n            }\n\n            return _context.abrupt(\"return\", config);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(function (response) {\n  if (response.status === 200) {\n    return response.data;\n  }\n\n  return Promise.reject(response);\n}, function (error) {\n  if (error) {\n    console.log(JSON.stringify(error));\n  } else {\n    console.log('ISSUE');\n  }\n\n  return Promise.reject(error);\n});\nexport default instance;",{"version":3,"sources":["src\\api\\config.js"],"names":["axios","router","baseURL","instance","create","defaults","timeout","interceptors","request","use","config","url","charAt","Promise","reject","error","response","status","data","console","log","JSON","stringify"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,IAAMC,UAAU,uBAAhB,C,CACA;AACA;;AAEA,IAAIC,WAAWH,MAAMI,MAAN,EAAf;AAEAD,SAASE,QAAT,CAAkBC,OAAlB,GAA4B,KAA5B,C,CACA;;AACAH,SAASI,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkC,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAC9B;AACA;AACA;AACA,gBAAIA,OAAOC,GAAP,IAAcD,OAAOC,GAAP,CAAWC,MAAX,CAAkB,CAAlB,MAAyB,GAA3C,EAAgD;AAC5CF,qBAAOC,GAAP,aAAgBT,OAAhB,SAA0BQ,OAAOC,GAAjC;AACH;;AAN6B,6CAQvBD,MARuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA,KASG;AAAA,SAASG,QAAQC,MAAR,CAAeC,KAAf,CAAT;AAAA,CATH;AAWAZ,SAASI,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,CAAmC,oBAAY;AAC3C,MAAIO,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,WAAOD,SAASE,IAAhB;AACH;;AACD,SAAOL,QAAQC,MAAR,CAAeE,QAAf,CAAP;AACH,CALD,EAKG,iBAAS;AACR,MAAID,KAAJ,EAAW;AACPI,YAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeP,KAAf,CAAZ;AACH,GAFD,MAEO;AACHI,YAAQC,GAAR,CAAY,OAAZ;AACH;;AACD,SAAOP,QAAQC,MAAR,CAAeC,KAAf,CAAP;AACH,CAZD;AAcA,eAAeZ,QAAf","sourceRoot":"C:\\92_node_workspace\\ATL_node_workspace\\demo","sourcesContent":["import axios from 'axios'\nimport router from '../router';\nconst baseURL = 'http://localhost:8433'\n// const baseURL = 'http://localhost:3000'\n// const baseURL = ''\n\nvar instance = axios.create()\n\ninstance.defaults.timeout = 30000\n//instance.defaults.headers['Access-Control-Allow-Origin'] = '*';\ninstance.interceptors.request.use(async config => {\n    // if (config.url != '/login' && !localStorage.getItem('user_id')) {\n    //     router.push('/');\n    // }\n    if (config.url && config.url.charAt(0) === '/') {\n        config.url = `${baseURL}${config.url}`\n    }\n\n    return config\n}, error => Promise.reject(error))\n\ninstance.interceptors.response.use(response => {\n    if (response.status === 200) {\n        return response.data\n    }\n    return Promise.reject(response)\n}, error => {\n    if (error) {\n        console.log(JSON.stringify(error))\n    } else {\n        console.log('ISSUE')\n    }\n    return Promise.reject(error)\n})\n\nexport default instance"]}]}